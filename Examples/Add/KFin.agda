module Examples.Add.KFin where

open import Data.Unit using (tt) renaming (โค to โคโฒ)  -- for type hints
open import Data.Sum using (injโ; injโ)
open import Data.Product using (ฮฃ; ฮฃ-syntax; _,_; uncurry)
  renaming (_ร_ to _รโฒ_; map to _โโฒ_) -- makes type hints easier to read
open import Data.Fin as ๐ฝ hiding (_+_) renaming (Fin to ๐ฝ)
open import Data.Fin.Properties
open import Data.Nat as โ
open import Data.Nat.Properties as โP
open import Relation.Binary.PropositionalEquality
open import Relation.Binary.PropositionalEquality.Properties
open โก-Reasoning
open import Data.Vec hiding (splitAt)
open import Function using (_โโฒ_) renaming (id to idโฒ) -- TEMP
open import Data.Nat.Tactic.RingSolver

open import Categorical.Raw hiding (uncurry)
open import Functions
open import Categorical.Arrow Function ; open _โจ_

inject+โฒ : โ {m} n โ ๐ฝ m โ ๐ฝ (n + m)
inject+โฒ {m} n j = cast (+-comm m n) (inject+ n j)

toโ-inject+โฒ : โ {m} n (j : ๐ฝ m) โ toโ (inject+โฒ n j) โก toโ j
toโ-inject+โฒ {m} n j = trans (toโ-cast _ _) (sym (toโ-inject+ n j))

infixl 6 _โน_
_โน_ : โ {m n} โ ๐ฝ (suc m) โ ๐ฝ n โ ๐ฝ (m + n)
_โน_ {m}      zero   j = inject+โฒ m j
_โน_ {suc _} (suc i) j = suc (i โน j)

โจ+โฉ : โ ร โ โ โ
โจ+โฉ = uncurry _+_

โจโนโฉ : โ {m n} โ ๐ฝ (suc m) ร ๐ฝ n โ ๐ฝ (m + n)
โจโนโฉ = uncurry _โน_

toโ-โน : โ {m n} ((i , j) : ๐ฝ (suc m) ร ๐ฝ n) โ toโ (i โน j) โก toโ i + toโ j
toโ-โน {m} (zero , j) = toโ-inject+โฒ m j
toโ-โน {suc _} (suc i , j) rewrite toโ-โน (i , j) = refl

โนโ : โ {m n} โ toโ {suc m} โ toโ {n} โ toโ {m + n}
โนโ = mk โจโนโฉ โจ+โฉ toโ-โน

-- file:///Users/conal/git-repos/quiver/src/index.html?q=WzAsNCxbMCwwLCJOIFxcdGltZXMgTiJdLFsyLDAsIk4iXSxbMCwyLCJGX3tzdWNcXCBtfSDDlyBGX24iXSxbMiwyLCJGX3ttICsgbn0iXSxbMCwxLCJcXGxhbmdsZStcXHJhbmdsZSIsMV0sWzIsMCwidG9OX3tzdWNcXCBtfSAgXFxvdGltZXMgdG9OX24iLDFdLFszLDEsInRvTl97bSArIG59IiwxXSxbMiwzLCJcXGxhbmdsZeKKuVxccmFuZ2xlIiwxXV0=

add๐ฝโ : โ {m n} โ toโ {2} โ toโ {m} โ toโ {n} โ toโ {m + n}
add๐ฝโ = โนโ โ first โนโ โ assocหก

add๐ฝ : โ {m n} โ ๐ฝ 2 ร ๐ฝ m ร ๐ฝ n โ ๐ฝ (m + n)
add๐ฝ = fโ add๐ฝโ

combโ : (n : โ) โ โ ร โ โ โ
combโ n (i , j) = i + j * n

open import Data.Nat.DivMod
open import Relation.Nullary.Decidable using (False)

infix 4 _โข0
_โข0 : โ โ Set
m โข0 = False (m โP.โ 0)

infixl 7 _โข0*_
_โข0*_ : โ j k โ โฆ _ : j โข0 โฆ โฆ _ : k โข0 โฆ โ j * k โข0
suc _ โข0* suc _ = tt

-- quotRem k "i" = "i % k" , "i / k". Naming convention from agda-stdlib.
quotRemโ : โ n โ โฆ nโข0 : n โข0 โฆ โ โ โ โ ร โ
quotRemโ (suc n) m = m % suc n , m / suc n

qrโ2 : โ โ โ ร โ
qrโ2 = quotRemโ 2

-- qrโ0 : โ โ โ ร โ
-- qrโ0 = quotRemโ 0  -- "No instance of type 0 โข0 was found in scope."

combโquotRemโ : (n : โ) โฆ nโข0 : n โข0 โฆ โ combโ n โ quotRemโ n โ id
combโquotRemโ (suc n) m = sym (mโกm%n+[m/n]*n m n)

inverseโ : โ {a b aโฒ bโฒ : Set} (f : a โ b){i : aโฒ โ a}{j : bโฒ โ b}{jโปยน : b โ bโฒ}
         โ j โ jโปยน โ id
         โ i โ j
inverseโ f {i}{j}{jโปยน} jโjโปยน = mk (jโปยน โ f โ i) f (ฮป a โ jโjโปยน (f (i a)))

addโ : โ ร โ ร โ โ โ
addโ (cแตข , a , b) = cแตข + a + b

addcโโ : โ k โ โฆ _ : k โข0 โฆ โ id {a = โ ร โ ร โ} โ combโ k
addcโโ k = inverseโ addโ {jโปยน = quotRemโ k} (combโquotRemโ k)

addcโ : โ k โ โฆ _ : k โข0 โฆ โ โ ร โ ร โ โ โ ร โ
addcโ k = quotRemโ k โ addโ

_ : โ {k} โฆ _ : k โข0 โฆ โ fโ (addcโโ k) โก addcโ k
_ = refl

๐น : Set
๐น = Bool

bval : ๐น โ โ
bval ๐ = 0
bval ๐ฅ = 1

C : Set โ Set
C r = ๐น ร r ร r โ r ร ๐น

addแถโ : โ k โฆ _ : k โข0 โฆ {r : Set} {ฮผ : r โ โ} (+ฬ : C r)
      โ (ฮผ โ bval) โ +ฬ โ addcโ k โ (bval โ twice ฮผ)
      โ bval โ twice ฮผ โ ฮผ โ bval
addแถโ k +ฬ = mk +ฬ (addcโ k)


record Adder k โฆ _ : k โข0 โฆ {r : Set}{ฮผ : r โ โ} : Set where
  constructor mk
  field
    arr : bval โ twice ฮผ โ ฮผ โ bval
    โฆ isAdd โฆ : fโ arr โก addcโ k

adder : โ {k} โฆ _ : k โข0 โฆ {r : Set} {ฮผ : r โ โ} (+ฬ : C r)
      โ (ฮผ โ bval) โ +ฬ โ addcโ k โ (bval โ twice ฮผ)
      โ Adder k {r}{ฮผ}
adder {k} +ฬ commute = mk (addแถโ k +ฬ commute)

pattern adderแต +ฬ commute = mk (mk +ฬ _ commute)

0แถ : Adder 1 {โค}{ฮป { tt โ zero }}
0แถ = adder (ฮป (cแตข , tt , tt) โ tt , cแตข)
           ฮป {(๐ , tt , tt) โ refl ; (๐ฅ , tt , tt) โ refl}

1แถ : Adder 2
1แถ = adder +ฬ comm
 where
   import Data.Bool as ๐น

   ยฝฬ : ๐น ร ๐น โ ๐น ร ๐น
   ยฝฬ (a , b) = a ๐น.xor b , a ๐น.โง b

   +ฬ : C ๐น
   +ฬ (cแตข , a , b) = let p , d = ยฝฬ (a , b) ; q , e = ยฝฬ (cแตข , p) in
     q , e ๐น.โจ d

   -- -- In categorical terms,
   -- ยฝฬ = xor โต โง
   -- +ฬ = second โจ โ inAssocหก ยฝฬ โ second ยฝฬ

   comm : (bval โ bval) โ +ฬ โ addcโ 2 โ (bval โ twice bval)
   comm (๐ , ๐ , ๐) = refl
   comm (๐ , ๐ , ๐ฅ) = refl
   comm (๐ , ๐ฅ , ๐) = refl
   comm (๐ , ๐ฅ , ๐ฅ) = refl
   comm (๐ฅ , ๐ , ๐) = refl
   comm (๐ฅ , ๐ , ๐ฅ) = refl
   comm (๐ฅ , ๐ฅ , ๐) = refl
   comm (๐ฅ , ๐ฅ , ๐ฅ) = refl

addร : (kแตฃ : โ) (kโ : โ) โฆ _ : kแตฃ โข0 โฆ โฆ _ : kโ โข0 โฆ
     โ โ ร (โ ร โ) ร (โ ร โ) โ (โ ร โ) ร โ
addร kแตฃ kโ (cแตข , (xแตฃ , xโ) , (yแตฃ , yโ)) =
  let zแตฃ , cโ = addcโ kแตฃ (cแตข , xแตฃ , yแตฃ)
      zโ , cโ = addcโ kโ (cโ , xโ , yโ)
  in (zแตฃ , zโ) , cโ

private
 module ร where

  stepโโฒ : โ kแตฃ cแตข xแตฃ xโ yแตฃ yโ
    โ cแตข + (xแตฃ + xโ * kแตฃ) + (yแตฃ + yโ * kแตฃ) โก (cแตข + xแตฃ + yแตฃ) + (xโ + yโ) * kแตฃ
  stepโโฒ = solve-โ

  stepโ : โ kแตฃ โฆ _ : kแตฃ โข0 โฆ cแตข xแตฃ xโ yแตฃ yโ โ
    let zแตฃ , cโ = addcโ kแตฃ (cแตข , xแตฃ , yแตฃ)
    in addโ (cแตข , combโ kแตฃ (xแตฃ , xโ) , combโ kแตฃ (yแตฃ , yโ))
         โก combโ kแตฃ (combโ kแตฃ (zแตฃ , cโ) , xโ + yโ)
  stepโ kแตฃ cแตข xแตฃ xโ yแตฃ yโ =
    let zแตฃ , cโ = addcโ kแตฃ (cแตข , xแตฃ , yแตฃ)
    in begin
         cแตข + (xแตฃ + xโ * kแตฃ) + (yแตฃ + yโ * kแตฃ)
       โกโจ stepโโฒ kแตฃ cแตข xแตฃ xโ yแตฃ yโ โฉ
         (cแตข + xแตฃ + yแตฃ) + (xโ + yโ) * kแตฃ
       โกโจ cong (_+ (xโ + yโ) * kแตฃ) (sym (combโquotRemโ kแตฃ (cแตข + xแตฃ + yแตฃ))) โฉ
         combโ kแตฃ (quotRemโ kแตฃ (cแตข + xแตฃ + yแตฃ)) + (xโ + yโ) * kแตฃ
       โกโจโฉ
         combโ kแตฃ (zแตฃ , cโ) + (xโ + yโ) * kแตฃ
      โกโจโฉ
        combโ kแตฃ (combโ kแตฃ (zแตฃ , cโ) , xโ + yโ)
       โ

  stepโโฒ : โ kแตฃ kโ zแตฃ cโ xโ yโ โ
    zแตฃ + cโ * kแตฃ + (xโ + yโ) * kแตฃ โก zแตฃ + (cโ + xโ + yโ) * kแตฃ
  stepโโฒ = solve-โ

  stepโ : โ kแตฃ kโ โฆ _ : kแตฃ โข0 โฆ โฆ _ : kโ โข0 โฆ zแตฃ cโ xโ yโ โ
    combโ kแตฃ (combโ kแตฃ (zแตฃ , cโ) , xโ + yโ)
     โก combโ kแตฃ (zแตฃ , combโ kโ (addcโ kโ (cโ , xโ , yโ)))
  stepโ kแตฃ kโ zแตฃ cโ xโ yโ =
      begin
        combโ kแตฃ (combโ kแตฃ (zแตฃ , cโ) , xโ + yโ)
      โกโจ stepโโฒ kแตฃ kโ zแตฃ cโ xโ yโ โฉ
        combโ kแตฃ (zแตฃ , cโ + xโ + yโ)
      โกโจ cong (ฮป z โ combโ kแตฃ (zแตฃ , z)) (sym (combโquotRemโ kโ (cโ + xโ + yโ))) โฉ
        combโ kแตฃ (zแตฃ , combโ kโ (quotRemโ kโ (cโ + xโ + yโ)))
      โกโจโฉ
        combโ kแตฃ (zแตฃ , combโ kโ (addcโ kโ (cโ , xโ , yโ)))
      โ

  stepโโฒ : โ kแตฃ kโ zแตฃ zโ cโ โ
    zแตฃ + (zโ + cโ * kโ) * kแตฃ โก zแตฃ + zโ * kแตฃ + cโ * (kโ * kแตฃ)
  stepโโฒ = solve-โ

  stepโ : โ kแตฃ kโ โฆ _ : kแตฃ โข0 โฆ โฆ _ : kโ โข0 โฆ
            ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ)) : โ ร (โ ร โ) ร (โ ร โ)) โ
    let (zแตฃ , zโ) , cโ = addร kแตฃ kโ ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) in
      combโ kแตฃ (zแตฃ , combโ kโ (zโ , cโ))
       โก combโ (kโ * kแตฃ) (combโ kแตฃ (zแตฃ , zโ) , cโ)
  stepโ kแตฃ kโ ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) =
    let (zแตฃ , zโ) , cโ = addร kแตฃ kโ ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) in
      stepโโฒ kแตฃ kโ zแตฃ zโ cโ

addโร : โ kแตฃ kโ โฆ _ : kแตฃ โข0 โฆ โฆ _ : kโ โข0 โฆ โ
    addโ โ second (twice (combโ kแตฃ))
  โ combโ (kโ * kแตฃ) โ first (combโ kแตฃ) โ addร kแตฃ kโ

addโร kแตฃ kโ ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) =
  let zแตฃ , cโ = addcโ kแตฃ (cแตข , xแตฃ , yแตฃ)
      zโ , cโ = addcโ kโ (cโ , xโ , yโ)
  in
    begin
      addโ (cแตข , combโ kแตฃ (xแตฃ , xโ) , combโ kแตฃ (yแตฃ , yโ))
    โกโจ ร.stepโ kแตฃ cแตข xแตฃ xโ yแตฃ yโ โฉ
      combโ kแตฃ (combโ kแตฃ (zแตฃ , cโ) , xโ + yโ)
    โกโจ ร.stepโ kแตฃ kโ zแตฃ cโ xโ yโ โฉ
      combโ kแตฃ (zแตฃ , combโ kโ (zโ , cโ))
    โกโจ ร.stepโ kแตฃ kโ ((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) โฉ
      combโ (kโ * kแตฃ) (combโ kแตฃ (zแตฃ , zโ) , cโ)
    โ

addโรโ : โ kแตฃ kโ โฆ _ : kแตฃ โข0 โฆ โฆ _ : kโ โข0 โฆ (let instance _ = kโ โข0* kแตฃ) โ
    addcโ (kโ * kแตฃ) โ second (twice (combโ kแตฃ))
  โ first (combโ kแตฃ) โ addร kแตฃ kโ
addโรโ kแตฃ kโ =
  let instance _ = kโ โข0* kแตฃ in ฮป q@((cแตข , (xแตฃ , xโ) , (yแตฃ , yโ))) โ
    begin
      (addcโ (kโ * kแตฃ) โ second (twice (combโ kแตฃ))) q
    โกโจโฉ
      addcโ (kโ * kแตฃ) ((cแตข , combโ kแตฃ (xแตฃ , xโ) , combโ kแตฃ (yแตฃ , yโ)))
    โกโจโฉ
      quotRemโ (kโ * kแตฃ) (addโ ((cแตข , combโ kแตฃ (xแตฃ , xโ) , combโ kแตฃ (yแตฃ , yโ))))
    โกโจ cong (quotRemโ (kโ * kแตฃ)) (addโร kแตฃ kโ q) โฉ
      quotRemโ (kโ * kแตฃ) ((combโ (kโ * kแตฃ) โ first (combโ kแตฃ) โ addร kแตฃ kโ) q)
    โกโจโฉ
      quotRemโ (kโ * kแตฃ) (combโ (kโ * kแตฃ) (first (combโ kแตฃ) (addร kแตฃ kโ q)))
    โกโจ {!!} โฉ
      first (combโ kแตฃ) (addร kแตฃ kโ q)
    โกโจโฉ
      (first (combโ kแตฃ) โ addร kแตฃ kโ) q
    โ

-- I think quotRemโcombโ k requires values to be are within bounds.

-- adder : โ {k} โฆ _ : k โข0 โฆ {r : Set} {ฮผ : r โ โ} (+ฬ : C r)
--       โ (ฮผ โ bval) โ +ฬ โ addcโ k โ (bval โ twice ฮผ)
--       โ Adder k {r}{ฮผ}
-- adder {k} +ฬ commute = mk (addแถโ k +ฬ commute)

-- Maybe instead change the commutativity condition to match addโร

-- adder : โ {k} โฆ _ : k โข0 โฆ {r : Set} {ฮผ : r โ โ} (+ฬ : C r)
--       โ combโ k โ (ฮผ โ bval) โ +ฬ โ addโ k โ (bval โ twice ฮผ)
--       โ Adder k {r}{ฮผ}
